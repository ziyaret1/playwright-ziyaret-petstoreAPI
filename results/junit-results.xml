<testsuites id="" name="" tests="23" failures="12" skipped="0" errors="0" time="5.655594">
<testsuite name="store\storeTests.spec.ts" timestamp="2025-10-31T21:26:32.427Z" hostname="chromium" tests="9" failures="4" skipped="0" time="8.917" errors="0">
<testcase name="Returns pet inventories › [TRA-014] Verify that inventory can be fetched successfully" classname="store\storeTests.spec.ts" time="1.036">
</testcase>
<testcase name="Returns pet inventories › [TRA-016] Verify that order details can be retrieved by ID" classname="store\storeTests.spec.ts" time="1.01">
<failure message="storeTests.spec.ts:17:5 [TRA-016] Verify that order details can be retrieved by ID" type="FAILURE">
<![CDATA[  [chromium] › store\storeTests.spec.ts:17:5 › Returns pet inventories › [TRA-016] Verify that order details can be retrieved by ID 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      17 |     test('[TRA-016] Verify that order details can be retrieved by ID', async ({ storeApi }) => {
      18 |         const response = await storeApi.getOrderByID(createdOrderID);
    > 19 |         expect(response.status).toBe(200);
         |                                 ^
      20 |     });
      21 |     test('[TRA-017] Verify error response for invalid order ID retrieval', async ({ storeApi }) => {
      22 |         const response = await storeApi.getOrderByID(-999);
        at C:\Users\ziyar\OneDrive\Masaüstü\playwright-ziyaret-petstoreAPI\tests\store\storeTests.spec.ts:19:33
]]>
</failure>
</testcase>
<testcase name="Returns pet inventories › [TRA-017] Verify error response for invalid order ID retrieval" classname="store\storeTests.spec.ts" time="0.998">
</testcase>
<testcase name="Place an order for a pet › [TRA-15] Verify that an order can be placed successfully" classname="store\storeTests.spec.ts" time="0.924">
</testcase>
<testcase name="Place an order for a pet › [TRA-20] Verify placing an order with missing required fields returns an error" classname="store\storeTests.spec.ts" time="0.916">
<failure message="storeTests.spec.ts:36:5 [TRA-20] Verify placing an order with missing required fields returns an error" type="FAILURE">
<![CDATA[  [chromium] › store\storeTests.spec.ts:36:5 › Place an order for a pet › [TRA-20] Verify placing an order with missing required fields returns an error 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 200

      38 |     }) => {
      39 |         const response = await storeApi.placeAnOrder(InvalidOrderData.missingField);
    > 40 |         expect(response.status).toBe(400);
         |                                 ^
      41 |     });
      42 |     test('[TRA-21] Verify placing an order with invalid data types returns an error', async ({
      43 |         storeApi,
        at C:\Users\ziyar\OneDrive\Masaüstü\playwright-ziyaret-petstoreAPI\tests\store\storeTests.spec.ts:40:33
]]>
</failure>
</testcase>
<testcase name="Place an order for a pet › [TRA-21] Verify placing an order with invalid data types returns an error" classname="store\storeTests.spec.ts" time="0.931">
<failure message="storeTests.spec.ts:42:5 [TRA-21] Verify placing an order with invalid data types returns an error" type="FAILURE">
<![CDATA[  [chromium] › store\storeTests.spec.ts:42:5 › Place an order for a pet › [TRA-21] Verify placing an order with invalid data types returns an error 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 500

      44 |     }) => {
      45 |         const response = await storeApi.placeAnOrder(InvalidOrderData.invalidDataType as any);
    > 46 |         expect(response.status).toBe(400);
         |                                 ^
      47 |     });
      48 | });
      49 | //! Delete
        at C:\Users\ziyar\OneDrive\Masaüstü\playwright-ziyaret-petstoreAPI\tests\store\storeTests.spec.ts:46:33
]]>
</failure>
</testcase>
<testcase name="Delete purchase order › [TRA-018] Verify that an order can be deleted successfully" classname="store\storeTests.spec.ts" time="1.087">
</testcase>
<testcase name="Delete purchase order › [TRA-019] Verify that error is returned for invalid order ID deletion" classname="store\storeTests.spec.ts" time="1.122">
<failure message="storeTests.spec.ts:60:5 [TRA-019] Verify that error is returned for invalid order ID deletion" type="FAILURE">
<![CDATA[  [chromium] › store\storeTests.spec.ts:60:5 › Delete purchase order › [TRA-019] Verify that error is returned for invalid order ID deletion 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 404

      62 |     }) => {
      63 |         const response = await storeApi.deleteOrderByID(-9999);
    > 64 |         expect(response.status).toBe(400);
         |                                 ^
      65 |     });
      66 |     test('[TRA-022] Verify deleting an already deleted order returns appropriate error', async ({
      67 |         storeApi,
        at C:\Users\ziyar\OneDrive\Masaüstü\playwright-ziyaret-petstoreAPI\tests\store\storeTests.spec.ts:64:33
]]>
</failure>
</testcase>
<testcase name="Delete purchase order › [TRA-022] Verify deleting an already deleted order returns appropriate error" classname="store\storeTests.spec.ts" time="0.893">
</testcase>
</testsuite>
<testsuite name="UserManagementTest\userManagement.spec.ts" timestamp="2025-10-31T21:26:32.427Z" hostname="chromium" tests="14" failures="8" skipped="0" time="7.275" errors="0">
<testcase name="Create User &amp; Login User Suite › [TRA-002] Verify that a new user can be created successfully" classname="UserManagementTest\userManagement.spec.ts" time="0.923">
</testcase>
<testcase name="Create User List &amp; Array Suite › [TRA] Verify that multiple users can be created using createWithList" classname="UserManagementTest\userManagement.spec.ts" time="0.184">
</testcase>
<testcase name="Create User List &amp; Array Suite › [TRA] Verify that multiple users can be created using createWithArray" classname="UserManagementTest\userManagement.spec.ts" time="0.754">
</testcase>
<testcase name="Login User Suite › [TRA-003] Log in with valid credentials" classname="UserManagementTest\userManagement.spec.ts" time="0.18">
</testcase>
<testcase name="Login User Suite › [TRA-004] Log in with invalid credentials" classname="UserManagementTest\userManagement.spec.ts" time="0.185">
<failure message="userManagement.spec.ts:50:5 [TRA-004] Log in with invalid credentials" type="FAILURE">
<![CDATA[  [chromium] › UserManagementTest\userManagement.spec.ts:50:5 › Login User Suite › [TRA-004] Log in with invalid credentials 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 405
    Received: 200

      51 |         const invalidLoginData = userHelpers.loginInvalidUser();
      52 |         const response = await userApi.loginUser(invalidLoginData);
    > 53 |         expect(response.status).toBe(405);
         |                                 ^
      54 |     });
      55 | });
      56 | //! Get User
        at C:\Users\ziyar\OneDrive\Masaüstü\playwright-ziyaret-petstoreAPI\tests\UserManagementTest\userManagement.spec.ts:53:33
]]>
</failure>
</testcase>
<testcase name="Get User Suite › [TRA-005] Get user by valid username" classname="UserManagementTest\userManagement.spec.ts" time="0.189">
<failure message="userManagement.spec.ts:58:5 [TRA-005] Get user by valid username" type="FAILURE">
<![CDATA[  [chromium] › UserManagementTest\userManagement.spec.ts:58:5 › Get User Suite › [TRA-005] Get user by valid username 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      58 |     test('[TRA-005] Get user by valid username', async ({ userApi }) => {
      59 |         const response = await userApi.getUserWithUsername(TestUserLogin.username);
    > 60 |         expect(response.status).toBe(200);
         |                                 ^
      61 |         expect(response.body?.username).toBe(TestUserLogin.username);
      62 |     });
      63 |     test('[TRA-006] Get non-existing user by username', async ({ userApi }) => {
        at C:\Users\ziyar\OneDrive\Masaüstü\playwright-ziyaret-petstoreAPI\tests\UserManagementTest\userManagement.spec.ts:60:33
]]>
</failure>
</testcase>
<testcase name="Get User Suite › [TRA-006] Get non-existing user by username" classname="UserManagementTest\userManagement.spec.ts" time="0.757">
</testcase>
<testcase name="Get User Suite › [TRA-007] Get user with invalid username format" classname="UserManagementTest\userManagement.spec.ts" time="0.187">
<failure message="userManagement.spec.ts:67:5 [TRA-007] Get user with invalid username format" type="FAILURE">
<![CDATA[  [chromium] › UserManagementTest\userManagement.spec.ts:67:5 › Get User Suite › [TRA-007] Get user with invalid username format 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 404

      67 |     test('[TRA-007] Get user with invalid username format', async ({ userApi }) => {
      68 |         const response = await userApi.getUserWithUsername('!!@@@');
    > 69 |         expect(response.status).toBe(400);
         |                                 ^
      70 |     });
      71 | });
      72 | //! Update User
        at C:\Users\ziyar\OneDrive\Masaüstü\playwright-ziyaret-petstoreAPI\tests\UserManagementTest\userManagement.spec.ts:69:33
]]>
</failure>
</testcase>
<testcase name="Update User Suite › [TRA-008] Update existing user successfully" classname="UserManagementTest\userManagement.spec.ts" time="0.88">
<failure message="userManagement.spec.ts:74:5 [TRA-008] Update existing user successfully" type="FAILURE">
<![CDATA[  [chromium] › UserManagementTest\userManagement.spec.ts:74:5 › Update User Suite › [TRA-008] Update existing user successfully 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: "Updated"
    Received: undefined

      77 |         // get updpated user for check response
      78 |         const getUpdatedResponse = await userApi.getUserWithUsername(UpdatedUserData.username);
    > 79 |         expect(getUpdatedResponse.body?.firstName).toBe('Updated');
         |                                                    ^
      80 |         expect(getUpdatedResponse.body?.email).toBe('updated@email.com');
      81 |     });
      82 |     test('[TRA-009] Update user with invalid data', async ({ userApi }) => {
        at C:\Users\ziyar\OneDrive\Masaüstü\playwright-ziyaret-petstoreAPI\tests\UserManagementTest\userManagement.spec.ts:79:52
]]>
</failure>
</testcase>
<testcase name="Update User Suite › [TRA-009] Update user with invalid data" classname="UserManagementTest\userManagement.spec.ts" time="0.178">
<failure message="userManagement.spec.ts:82:5 [TRA-009] Update user with invalid data" type="FAILURE">
<![CDATA[  [chromium] › UserManagementTest\userManagement.spec.ts:82:5 › Update User Suite › [TRA-009] Update user with invalid data 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 200

      82 |     test('[TRA-009] Update user with invalid data', async ({ userApi }) => {
      83 |         const response = await userApi.updateUser(InvalidUserData.username, InvalidUserData);
    > 84 |         expect(response.status).toBe(400);
         |                                 ^
      85 |     });
      86 |     test('[TRA-010] Update non-existing user', async ({ userApi }) => {
      87 |         const response = await userApi.updateUser(
        at C:\Users\ziyar\OneDrive\Masaüstü\playwright-ziyaret-petstoreAPI\tests\UserManagementTest\userManagement.spec.ts:84:33
]]>
</failure>
</testcase>
<testcase name="Update User Suite › [TRA-010] Update non-existing user" classname="UserManagementTest\userManagement.spec.ts" time="0.725">
<failure message="userManagement.spec.ts:86:5 [TRA-010] Update non-existing user" type="FAILURE">
<![CDATA[  [chromium] › UserManagementTest\userManagement.spec.ts:86:5 › Update User Suite › [TRA-010] Update non-existing user 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 404
    Received: 200

      89 |             NonExistingUserData,
      90 |         );
    > 91 |         expect(response.status).toBe(404);
         |                                 ^
      92 |     });
      93 | });
      94 | //! Delete User
        at C:\Users\ziyar\OneDrive\Masaüstü\playwright-ziyaret-petstoreAPI\tests\UserManagementTest\userManagement.spec.ts:91:33
]]>
</failure>
</testcase>
<testcase name="Delete User Suite › [TRA-011] Delete existing user successfully" classname="UserManagementTest\userManagement.spec.ts" time="0.898">
<failure message="userManagement.spec.ts:104:5 [TRA-011] Delete existing user successfully" type="FAILURE">
<![CDATA[  [chromium] › UserManagementTest\userManagement.spec.ts:104:5 › Delete User Suite › [TRA-011] Delete existing user successfully 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 200
    Received: 404

      104 |     test('[TRA-011] Delete existing user successfully', async ({ userApi }) => {
      105 |         const response = await userApi.deleteUser(username);
    > 106 |         expect(response.status).toBe(200);
          |                                 ^
      107 |     });
      108 |     test('[TRA-012] Delete non-existing user', async ({ userApi }) => {
      109 |         const response = await userApi.deleteUser('nonExistingUser');
        at C:\Users\ziyar\OneDrive\Masaüstü\playwright-ziyaret-petstoreAPI\tests\UserManagementTest\userManagement.spec.ts:106:33
]]>
</failure>
</testcase>
<testcase name="Delete User Suite › [TRA-012] Delete non-existing user" classname="UserManagementTest\userManagement.spec.ts" time="0.897">
</testcase>
<testcase name="Delete User Suite › [TRA-013] Delete user with invalid username format" classname="UserManagementTest\userManagement.spec.ts" time="0.338">
<failure message="userManagement.spec.ts:112:5 [TRA-013] Delete user with invalid username format" type="FAILURE">
<![CDATA[  [chromium] › UserManagementTest\userManagement.spec.ts:112:5 › Delete User Suite › [TRA-013] Delete user with invalid username format 

    Error: expect(received).toBe(expected) // Object.is equality

    Expected: 400
    Received: 404

      112 |     test('[TRA-013] Delete user with invalid username format', async ({ userApi }) => {
      113 |         const response = await userApi.deleteUser('@@@!!!');
    > 114 |         expect(response?.status).toBe(400);
          |                                  ^
      115 |     });
      116 | });
      117 |
        at C:\Users\ziyar\OneDrive\Masaüstü\playwright-ziyaret-petstoreAPI\tests\UserManagementTest\userManagement.spec.ts:114:34
]]>
</failure>
</testcase>
</testsuite>
</testsuites>